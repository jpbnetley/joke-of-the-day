# This is a basic workflow to help you get started with Actions

name: Build and deploy [dev / prod]

# Controls when the action will run.
on:
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: 
      - master
      - dev

env:
  node_version: 18
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "install"
  
  build-and-publish-production:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      build: ${{ steps.success.outputs.buildStatus }}
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Use Node.js ${{ env.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.node_version }}
        cache: 'pnpm'
    - run: pnpm install --prod

    - uses: actions/checkout@v4
    - name: Install Vercel CLI
      run: pnpm i --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

    - id: success
      if: success()
      run: echo "::set-output name=buildStatus::success"
      
  build-and-publish-develop:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    outputs:
      build: ${{ steps.success.outputs.buildStatus }}
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Use Node.js ${{ env.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.node_version }}
        cache: 'pnpm'
    - run: pnpm install --prod

    - uses: actions/checkout@v4

    - name: Install Vercel CLI
      run: pnpm i --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=development --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

    - id: success
      if: success()
      run: echo "::set-output name=buildStatus::success"
        
  github-release:
    needs: [build-and-publish-production, build-and-publish-develop]
    if: needs.build-and-publish-production.outputs.build == 'success' || needs.build-and-publish-develop.outputs.build == 'success'
    runs-on: ubuntu-latest
    name: Generate Release Notes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          branches: |
            [
              'master',
              {
                name: 'dev',
                prerelease: true
              }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUNNER_DEBUG: 1

