{"version":3,"sources":["components/Joke.js","api/joke.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Joke","this","props","title","joke","link","target","rel","href","React","Component","url","getJokesAsJson","a","toast","info","fetch","jokes","json","error","console","getRandomJokeIndex","length","index","randomIndex","Math","round","random","getRandomJoke","Board","state","jokeApi","jokesJson","data","children","setState","jokeObject","selftext","renderedJoke","formatJoke","type","onClick","forceUpdate","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAsBeA,E,4JAnBb,WAAU,IAAD,EACuBC,KAAKC,MAA3BC,EADD,EACCA,MAAOC,EADR,EACQA,KAAMC,EADd,EACcA,KAErB,OAAMF,GAASC,GAAQC,EAInB,gCACE,6BAAKF,IACL,4BAAIC,IACJ,mBAAGE,OAAO,SAASC,IAAI,aAAaC,KAAMH,EAA1C,uBANG,0B,GALMI,IAAMC,W,OCAnBC,G,MAAM,wCAKEC,EAAc,uCAAG,4BAAAC,EAAA,sEAEzBC,IAAMC,KAAK,iBAFc,SAGPC,MAAML,GAHC,cAGrBM,EAHqB,gBAIdA,EAAMC,OAJQ,0EAM3BJ,IAAMK,MAAM,wBACZC,QAAQD,MAAM,+BAAgCR,GAC9CS,QAAQD,MAAR,MAR2B,0DAAH,qDAyBfE,EAAqB,SAArBA,EAAsBC,GACjC,IAV+BC,EAUzBC,EAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAgB,GACpD,OAAIH,EAAcF,IAVA,KADaC,EAWaC,IAVX,IAAVD,GAWdF,EAAmBC,GAEnBE,GAQGI,EAAgB,SAAhBA,EAAiB,GAAe,IAAbX,EAAY,EAAZA,MAC/B,IAAS,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOK,QAAS,EAGlB,OADoBL,EADFI,EAAmBJ,EAAMK,UACHM,EAAc,CAAEX,WCA7CY,E,kDAzCb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IACD4B,MAAQ,CAAEb,MAAO,IAFL,E,4FAKnB,8BAAAJ,EAAA,oEAEQZ,KAAK6B,MAAMb,MAAMK,OAAS,GAFlC,iEAI4BS,IAJ5B,OAIUC,EAJV,OAKUf,EAAQe,EAAUC,KAAKC,SAC7BjC,KAAKkC,SAAS,CACZlB,MAAOA,IAPb,kDAUIH,IAAMK,MAAM,wBACZC,QAAQD,MAAM,oCACdC,QAAQD,MAAM,WAAd,MAZJ,0D,8EAoBF,SAAWiB,GAAa,IAAD,SACYA,QADZ,IACYA,OADZ,EACYA,EAAYH,KAArC9B,EADa,EACbA,MAAOkC,EADM,EACNA,SAAU1B,EADJ,EACIA,IACzB,OAAO,cAAC,EAAD,CAAMR,MAAOA,EAAOC,KAAMiC,EAAUhC,KAAMM,M,oBAGjD,WAAU,IAAD,OACHP,EAAO2B,EAAsB9B,KAAK6B,OAClCQ,EAAgBlC,GAAQH,KAAKsC,WAAWnC,IAAU,cAAC,EAAD,IAEtD,OAAO,gCACEkC,EACD,wBAAQE,KAAK,SAASC,QAAS,kBAAM,EAAKC,eAA1C,iC,GArCQjC,IAAMC,WCSXiC,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UCGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.70c96982.chunk.js","sourcesContent":["import React from 'react'\n\nclass Joke extends React.Component {\n  render() {\n    const { title, joke, link } = this.props;\n\n    if (!(title && joke && link)) {\n      return <p></p>;\n    } else {\n      return (\n        <div>\n          <h1>{title}</h1>\n          <p>{joke}</p>\n          <a target=\"_blank\" rel=\"noreferrer\" href={link}>\n            source\n          </a>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Joke;","import { toast } from 'react-toastify';\n\nconst url = \"https://www.reddit.com/r/Jokes/.json\"\n\n/** \n   * Requests a joke from the url\n   */\n export const getJokesAsJson = async () => {\n  try {\n      toast.info(\"getting jokes\")\n    const jokes = await fetch(url);\n    return await jokes.json();\n  } catch (error) {\n    toast.error(\"Could not load jokes\");\n    console.error(\"could not fetch jokes from: \", url);\n    console.error(error)\n  }\n}\n\n/**\n * Skips the first 2 indexes as they are pinned comments on r/jokes\n * @param {int} index \n */\n export const skipFirst2Jokes = (index) => {\n  return (index !== 0 && index !== 1)\n}\n\n/**\n* Gets the amount of jokes that was retrieved,\n* and then chooses a random joke\n* @param {*} length the array length\n*/\nexport const getRandomJokeIndex = (length) => {\n  const randomIndex = Math.round(Math.random() * 100, 0);\n  if (randomIndex > length && skipFirst2Jokes(randomIndex)) {\n    return getRandomJokeIndex(length);\n  } else {\n    return randomIndex;\n  }\n}\n\n\n/** \n * Gets a random joke out of state\n */\n export const getRandomJoke = ({ jokes }) => {\n  if (jokes?.length > 0) {\n    const jokeIndex = getRandomJokeIndex(jokes.length);\n    const currentJoke = jokes[jokeIndex] || getRandomJoke({ jokes });\n    return currentJoke\n  }\n}","import React from 'react'\nimport Joke from './Joke'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport * as jokeApi from '../api/joke'\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { jokes: [] };\n  }\n\n  async componentDidMount() {\n    try {\n      if (this.state.jokes.length > 0) return\n      \n      const jokesJson = await jokeApi.getJokesAsJson();\n      const jokes = jokesJson.data.children;\n      this.setState({\n        jokes: jokes,\n      });\n    } catch (error) {\n      toast.error(\"Could not load jokes\");\n      console.error(\"could not update board component\");\n      console.error(\"status: \", error);\n    }\n  }\n\n  /**\n * Formats the joke object to be a `Joke` component\n * @param {*} jokeObject the response from the url (in this case, catering for reddit.)\n */\nformatJoke(jokeObject) {\n  const { title, selftext, url } = jokeObject?.data;\n  return <Joke title={title} joke={selftext} link={url} />;\n}\n\n  render() {\n  const joke = jokeApi.getRandomJoke(this.state)\n  const renderedJoke = (joke && this.formatJoke(joke)) || <Joke />\n\n    return <div>\n            {renderedJoke}\n            <button type=\"button\" onClick={() => this.forceUpdate()}>Refresh joke</button>\n        </div>;\n  }\n}\n\nexport default Board;","import './App.css';\nimport Board from './components/Board'\nimport { ToastContainer } from 'react-toastify';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board />\n        <ToastContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}