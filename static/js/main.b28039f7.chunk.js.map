{"version":3,"sources":["components/Joke.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Joke","this","props","title","joke","link","target","rel","href","React","Component","Board","state","jokes","a","length","getJokesAsJson","jokesJson","data","children","setState","toast","error","console","url","info","fetch","json","index","randomIndex","Math","round","random","skipFirst2Jokes","getRandomJokeIndex","jokeObject","selftext","currentJoke","formatJoke","forceUpdate","getRandomJoke","type","onClick","refresh","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAsBeA,E,4JAnBb,WAAU,IAAD,EACuBC,KAAKC,MAA3BC,EADD,EACCA,MAAOC,EADR,EACQA,KAAMC,EADd,EACcA,KAErB,OAAMF,GAASC,GAAQC,EAInB,gCACE,6BAAKF,IACL,4BAAIC,IACJ,mBAAGE,OAAO,SAASC,IAAI,aAAaC,KAAMH,EAA1C,uBANG,0B,GALMI,IAAMC,W,OCiGVC,G,wDA7Fb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CAAEC,MAAO,IAFL,E,4FAKnB,8BAAAC,EAAA,oEAEQb,KAAKW,MAAMC,MAAME,OAAS,GAFlC,iEAK4Bd,KAAKe,iBALjC,OAKUC,EALV,OAMUJ,EAAQI,EAAUC,KAAKC,SAC7BlB,KAAKmB,SAAS,CACZP,MAAOA,IARb,kDAWIQ,IAAMC,MAAM,wBACZC,QAAQD,MAAM,oCACdC,QAAQD,MAAM,WAAd,MAbJ,0D,yHAmBA,8BAAAR,EAAA,6DACUU,EAAQvB,KAAKC,MAAbsB,IADV,SAGMH,IAAMI,KAAK,iBAHjB,SAIwBC,MAAMF,GAJ9B,cAIUX,EAJV,gBAKiBA,EAAMc,OALvB,0EAOIN,IAAMC,MAAM,wBACZC,QAAQD,MAAM,+BAAgCE,GAC9CD,QAAQD,MAAR,MATJ,0D,mFAiBA,SAAgBM,GACd,OAAkB,IAAVA,GAAyB,IAAVA,I,gCAQzB,SAAmBb,GACjB,IAAMc,EAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAgB,GACpD,OAAIH,EAAcd,GAAUd,KAAKgC,gBAAgBJ,GACxC5B,KAAKiC,mBAAmBnB,GAExBc,I,wBAOX,SAAWM,GAAa,IAAD,EACYA,EAAWjB,KAApCf,EADa,EACbA,MAAOiC,EADM,EACNA,SAAUZ,EADJ,EACIA,IACzB,OAAO,cAAC,EAAD,CAAMrB,MAAOA,EAAOC,KAAMgC,EAAU/B,KAAMmB,M,2BAMnD,WAAiB,IACTX,EAAUZ,KAAKW,MAAfC,MACN,GAAIA,EAAME,OAAS,EAAG,CACpB,IACMsB,EAAcxB,EADFZ,KAAKiC,mBAAmBrB,EAAME,SAEhD,OAAOd,KAAKqC,WAAWD,GAEvB,OAAO,cAAC,EAAD,M,qBAIX,WACEpC,KAAKsC,gB,oBAGP,WAAU,IAAD,OACP,OAAO,gCACEtC,KAAKuC,gBACN,wBAAQC,KAAK,SAASC,QAAS,kBAAM,EAAKC,WAA1C,iC,GAzFQlC,IAAMC,YCWXkC,MAZf,WAEE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CAAOrB,IAJC,yCAKR,cAAC,IAAD,UCEOsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b28039f7.chunk.js","sourcesContent":["import React from 'react'\n\nclass Joke extends React.Component {\n  render() {\n    const { title, joke, link } = this.props;\n\n    if (!(title && joke && link)) {\n      return <p></p>;\n    } else {\n      return (\n        <div>\n          <h1>{title}</h1>\n          <p>{joke}</p>\n          <a target=\"_blank\" rel=\"noreferrer\" href={link}>\n            source\n          </a>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Joke;","import React from 'react'\nimport Joke from './Joke'\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { jokes: [] };\n  }\n\n  async componentDidMount() {\n    try {\n      if (this.state.jokes.length > 0) {\n        return\n      }\n      const jokesJson = await this.getJokesAsJson();\n      const jokes = jokesJson.data.children;\n      this.setState({\n        jokes: jokes,\n      });\n    } catch (error) {\n      toast.error(\"Could not load jokes\");\n      console.error(\"could not update board component\");\n      console.error(\"status: \", error);\n    }\n  }\n  /** \n   * Requests a joke from the url\n   */\n  async getJokesAsJson() {\n    const { url } = this.props;\n    try {\n        toast.info(\"getting jokes\")\n      const jokes = await fetch(url);\n      return await jokes.json();\n    } catch (error) {\n      toast.error(\"Could not load jokes\");\n      console.error(\"could not fetch jokes from: \", url);\n      console.error(error)\n    }\n  }\n\n  /**\n   * Skips the first 2 indexes as they are pinned comments on r/jokes\n   * @param {int} index \n   */\n  skipFirst2Jokes(index) {\n    return (index !== 0 && index !== 1)\n  }\n\n/**\n * Gets the amount of jokes that was retrieved,\n * and then chooses a random joke\n * @param {*} length the array length\n */\n  getRandomJokeIndex(length) {\n    const randomIndex = Math.round(Math.random() * 100, 0);\n    if (randomIndex > length && this.skipFirst2Jokes(randomIndex)) {\n      return this.getRandomJokeIndex(length);\n    } else {\n      return randomIndex;\n    }\n  }\n  /**\n   * Formats the joke object to be a `Joke` component\n   * @param {*} jokeObject the response from the url (in this case, catering for reddit.)\n   */\n  formatJoke(jokeObject) {\n    const { title, selftext, url } = jokeObject.data;\n    return <Joke title={title} joke={selftext} link={url} />;\n  }\n\n  /** \n   * Gets a random joke out of state\n   */\n  getRandomJoke() {\n    let { jokes } = this.state;\n    if (jokes.length > 0) {\n      const jokeIndex = this.getRandomJokeIndex(jokes.length);\n      const currentJoke = jokes[jokeIndex];\n      return this.formatJoke(currentJoke);\n    } else {\n      return <Joke />;\n    }\n  }\n\n  refresh() {\n    this.forceUpdate()\n  }\n\n  render() {\n    return <div>\n            {this.getRandomJoke()}\n            <button type=\"button\" onClick={() => this.refresh()}>Refresh joke</button>\n        </div>;\n  }\n}\n\nexport default Board;","import './App.css';\nimport Board from './components/Board'\nimport { ToastContainer } from 'react-toastify';\n\nfunction App() {\n  let jokeUrl = \"https://www.reddit.com/r/Jokes/.json\"\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board url={jokeUrl}/>\n        <ToastContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}