{"version":3,"sources":["components/Joke.js","api/joke.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Joke","props","title","joke","link","target","rel","href","url","getJokesAsJson","a","toast","info","fetch","jokes","json","error","console","getRandomJokeIndex","length","index","randomIndex","Math","round","random","getRandomJoke","Board","useState","setJokes","shouldRefresh","setRefresh","useEffect","fetchJokes","jokeApi","jokesJson","data","children","renderedJoke","jokeObject","selftext","formatJoke","type","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAkBeA,EAhBF,SAACC,GACZ,IAAQC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KAErB,OAAMF,GAASC,GAAQC,EAGrB,gCACE,6BAAKF,IACL,4BAAIC,IACJ,mBAAGE,OAAO,SAASC,IAAI,aAAaC,KAAMH,EAA1C,uBANiC,uB,OCHjCI,G,MAAM,wCAKCC,EAAc,uCAAG,4BAAAC,EAAA,sEAE1BC,IAAMC,KAAK,iBAFe,SAGNC,MAAML,GAHA,cAGpBM,EAHoB,gBAIbA,EAAMC,OAJO,0EAM1BJ,IAAMK,MAAM,wBACZC,QAAQD,MAAM,+BAAgCR,GAC9CS,QAAQD,MAAR,MAR0B,0DAAH,qDAyBdE,EAAqB,SAArBA,EAAsBC,GACjC,IAV8BC,EAUxBC,EAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAgB,GACpD,OAAIH,EAAcF,IAVD,KADaC,EAWcC,IAVZ,IAAVD,GAWbF,EAAmBC,GAEnBE,GAOEI,EAAgB,SAAhBA,EAAiBX,GAC5B,IAAS,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOK,QAAS,EAGlB,OADoBL,EADFI,EAAmBJ,EAAMK,UACHM,EAAc,CAAEX,WCE7CY,EA3CD,WACZ,MAA0BC,mBAAS,IAAnC,mBAAOb,EAAP,KAAcc,EAAd,KACA,EAAoCD,oBAAS,GAA7C,mBAAOE,EAAP,KAAsBC,EAAtB,KAIAC,qBAAU,WACR,IAAMC,EAAU,uCAAG,8BAAAtB,EAAA,+EAESuB,IAFT,OAETC,EAFS,OAGTpB,EAAQoB,EAAUC,KAAKC,SAC7BR,EAASd,GAJM,gDAMfH,IAAMK,MAAM,wBACZC,QAAQD,MAAM,2CACdC,QAAQD,MAAM,WAAd,MARe,yDAAH,qDAWhBgB,MACC,IAMH,IAKM7B,EAAO8B,EAAsBnB,GAC7BuB,EAAgBlC,GANH,SAACmC,GAClB,aAAiCA,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAYH,KAArCjC,EAAR,EAAQA,MAAOqC,EAAf,EAAeA,SAAU/B,EAAzB,EAAyBA,IACzB,OAAO,cAAC,EAAD,CAAMN,MAAOA,EAAOC,KAAMoC,EAAUnC,KAAMI,IAIrBgC,CAAWrC,IAAU,cAAC,EAAD,IAEnD,OACE,gCACGkC,EACD,wBAAQI,KAAK,SAASC,QAhCJ,kBAAMZ,GAAYD,IAgCpC,8BC3BSc,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UCGOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3139711b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Joke = (props) => {\n  const { title, joke, link } = props\n\n  if (!(title && joke && link)) return <p></p>\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <p>{joke}</p>\n      <a target=\"_blank\" rel=\"noreferrer\" href={link}>\n        source\n      </a>\n    </div>\n  )\n}\n\nexport default Joke\n","import { toast } from 'react-toastify'\n\nconst url = 'https://www.reddit.com/r/Jokes/.json'\n\n/**\n * Requests a joke from the url\n */\nexport const getJokesAsJson = async () => {\n  try {\n    toast.info('getting jokes')\n    const jokes = await fetch(url)\n    return await jokes.json()\n  } catch (error) {\n    toast.error('Could not load jokes')\n    console.error('could not fetch jokes from: ', url)\n    console.error(error)\n  }\n}\n\n/**\n * Skips the first 2 indexes as they are pinned comments on r/jokes\n * @param {int} index\n */\nexport const skipFirst2Jokes = (index) => {\n  return index !== 0 && index !== 1\n}\n\n/**\n * Gets the amount of jokes that was retrieved,\n * and then chooses a random joke\n * @param {*} length the array length\n */\nexport const getRandomJokeIndex = (length) => {\n  const randomIndex = Math.round(Math.random() * 100, 0)\n  if (randomIndex > length && skipFirst2Jokes(randomIndex)) {\n    return getRandomJokeIndex(length)\n  } else {\n    return randomIndex\n  }\n}\n\n/**\n * Gets a random joke out of state\n */\nexport const getRandomJoke = (jokes) => {\n  if (jokes?.length > 0) {\n    const jokeIndex = getRandomJokeIndex(jokes.length)\n    const currentJoke = jokes[jokeIndex] || getRandomJoke({ jokes })\n    return currentJoke\n  }\n}\n","import { useEffect, useState } from 'react'\nimport Joke from './Joke'\nimport { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport * as jokeApi from '../api/joke'\n\nconst Board = () => {\n  const [jokes, setJokes] = useState([])\n  const [shouldRefresh, setRefresh] = useState(false)\n\n  const onUpdateClick = () => setRefresh(!shouldRefresh)\n\n  useEffect(() => {\n    const fetchJokes = async () => {\n      try {\n        const jokesJson = await jokeApi.getJokesAsJson()\n        const jokes = jokesJson.data.children\n        setJokes(jokes)\n      } catch (error) {\n        toast.error('Could not load jokes')\n        console.error('could not onUpdateClick board component')\n        console.error('status: ', error)\n      }\n    }\n    fetchJokes()\n  }, [])\n\n  /**\n   * Formats the joke object to be a `Joke` component\n   * @param {*} jokeObject the response from the url (in this case, catering for reddit.)\n   */\n  const formatJoke = (jokeObject) => {\n    const { title, selftext, url } = jokeObject?.data\n    return <Joke title={title} joke={selftext} link={url} />\n  }\n\n  const joke = jokeApi.getRandomJoke(jokes)\n  const renderedJoke = (joke && formatJoke(joke)) || <Joke />\n\n  return (\n    <div>\n      {renderedJoke}\n      <button type=\"button\" onClick={onUpdateClick}>\n        Refresh joke\n      </button>\n    </div>\n  )\n}\n\nexport default Board\n","import './App.css'\nimport Board from './components/Board'\nimport { ToastContainer } from 'react-toastify'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board />\n        <ToastContainer />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}